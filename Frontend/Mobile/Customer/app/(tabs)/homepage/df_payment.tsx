// df_payment.tsx (UPDATED: Corrected chain data re-passing logic)

import { FontAwesome5, Ionicons } from "@expo/vector-icons";
import { Stack, useLocalSearchParams, useRouter } from "expo-router";
import React, { useState, useMemo, useEffect } from "react";
import {
Â  SafeAreaView,
Â  ScrollView,
Â  StyleSheet,
Â  Text,
Â  TouchableOpacity,
Â  View,
Â  Alert,
Â  ActivityIndicator
} from "react-native";

// ðŸ”‘ Import DeliveryOption directly from shops.ts
import { DeliveryOption } from "@/lib/shops";


// Helper to determine the dynamic fee display based on option name
const getFeeDisplay = (option: DeliveryOption) => {
Â  Â  // Only Drop-off is confirmed Free based on the business process
Â  Â  if (option.name.toLowerCase().includes("drop-off")) {
Â  Â  Â  Â  return "FREE (â‚± 0.00)";
Â  Â  }
Â  Â  // All other options require later calculation by the shop/rider booking
Â  Â  return "Fee to be confirmed";
};

// --- Helper Function to safely parse JSON arrays ---
function safeParseParams<T>(param: string | string[] | undefined): T[] {
    if (typeof param === 'string') {
        try {
            return JSON.parse(param) as T[];
        } catch (e) {
            console.error("Failed to parse navigation param:", e);
            return [];
        }
    }
    return [];
}


export default function DeliveryPayment() {
Â  const router = useRouter();
Â  
Â  // 1. RECEIVE ALL NECESSARY PARAMS (Store all lookup arrays as RAW strings)
Â  const { 
Â  Â  Â  Â  shopId, shopName, SvcID, 
Â  Â  Â  Â  fabrics, addons, instructions, // Collected Details from laundry_details (strings)
Â  Â  Â  Â  
Â  Â  Â  Â  // ðŸ”‘ CRITICAL FIX 1: Store all lookup lists as raw string parameters
Â  Â  Â  Â  availableServices: availableServicesChain, 
Â  Â  Â  Â  availableAddOns: availableAddOnsChain, 
Â  Â  Â  Â  availableFabricTypes: availableFabricTypesChain, 
Â  Â  Â  Â  availableDeliveryOptions: deliveryOptionsChain, 
Â  Â  } = useLocalSearchParams(); 

Â  const [selectedDeliveryId, setSelectedDeliveryId] = useState<string | null>(null);
Â  const [loading, setLoading] = useState(true);

Â  // 2. PARSE DYNAMIC DELIVERY OPTIONS (For on-screen use)
Â  const availableDeliveryOptions: DeliveryOption[] = useMemo(() => {
Â  Â  return safeParseParams<DeliveryOption>(deliveryOptionsChain);
Â  }, [deliveryOptionsChain]);
Â Â 
Â  useEffect(() => {
Â  Â  if (shopId) { // Check for core ID
Â  Â  Â  setLoading(false);
Â  Â  }
Â  }, [shopId, availableDeliveryOptions]);

Â  const selectedDetails = availableDeliveryOptions.find((opt) => opt.id === selectedDeliveryId);
Â  
Â  // Assemble debugData (check against the raw chains for true/false status)
Â  const debugData = useMemo(() => ({
Â  Â  Â  Â  Shop_ID: shopId,
Â  Â  Â  Â  Svc_ID: SvcID,
Â  Â  Â  Â  Dlvry_ID: selectedDeliveryId,
Â  Â  Â  Â  Fabrics_IDs: fabrics,
Â  Â  Â  Â  Addons_IDs: addons,
Â  Â  Â  Â  Instructions: instructions,
Â  Â  Â  Â  Lists_Status: `Svc:${!!availableServicesChain}, AddOns:${!!availableAddOnsChain}, Fabrics:${!!availableFabricTypesChain}`,
Â  Â  }), [shopId, SvcID, selectedDeliveryId, fabrics, addons, instructions, availableServicesChain, availableAddOnsChain, availableFabricTypesChain]);


Â  const handleOrder = () => {
Â  Â  if (!selectedDetails) {
Â  Â  Â  Â  Alert.alert("Selection Required", "Please select a delivery option to proceed.");
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  // 3. PASS ALL COLLECTED DATA TO THE FINAL CONFIRMATION SCREEN
Â  Â  router.push({
Â  Â  Â  pathname: "/homepage/order_summary",
Â  Â  Â  params: {
Â  Â  Â  Â  // ðŸ”‘ CRITICAL FIX 2: Pass ALL lookup lists using their raw incoming STRING chain data
Â  Â  Â  Â  availableServices: availableServicesChain, 
Â  Â  Â  Â  availableAddOns: availableAddOnsChain,
Â  Â  Â  Â  availableFabricTypes: availableFabricTypesChain, 

Â  Â  Â  Â  // Collected Payload Data (CRITICAL for order_summary calculation and display)
Â  Â  Â  Â  shopId: shopId,
Â  Â  Â  Â  shopName: shopName,
Â  Â  Â  Â  SvcID: SvcID, 
Â  Â  Â  Â  fabrics: fabrics,
Â  Â  Â  Â  addons: addons,
Â  Â  Â  Â  instructions: instructions,
Â  Â  Â  Â  
Â  Â  Â  Â  // New Collected Data 
Â  Â  Â  Â  deliveryId: selectedDeliveryId, 
Â  Â  Â  Â  deliveryOptionName: selectedDetails.name,Â 
Â  Â  Â  },
Â  Â  });
Â  };
Â Â 
Â  if (loading) {
Â  Â  return (
Â  Â  Â  <View style={styles.loadingContainer}>
Â  Â  Â  Â  <ActivityIndicator size="large" color="#004aad" />
Â  Â  Â  Â  <Text style={{ marginTop: 10, color: '#555' }}>Loading delivery options...</Text>
Â  Â  Â  </View>
Â  Â  );
Â  }

Â  return (
Â  Â  <SafeAreaView style={styles.safeArea}>
Â  Â  Â  {/* Header */}
Â  Â  Â  <Stack.Screen
Â  Â  Â  Â  options={{
Â  Â  Â  Â  Â  headerShown: true,
Â  Â  Â  Â  Â  headerStyle: { backgroundColor: "#89CFF0" },
Â  Â  Â  Â  Â  headerShadowVisible: false,
Â  Â  Â  Â  Â  headerTintColor: "#2d2d2dff",
Â  Â  Â  Â  Â  headerLeft: () => (
Â  Â  Â  Â  Â  Â  <TouchableOpacity onPress={() => router.back()}>
Â  Â  Â  Â  Â  Â  Â  <Ionicons name="arrow-back" size={24} color="#000" style={{ marginLeft: 10 }} />
Â  Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  Â  headerTitle: () => (
Â  Â  Â  Â  Â  Â  <Text style={styles.headerTitle}>Delivery Option</Text>
Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  }}
Â  Â  Â  />

Â  Â  Â  {/* Content */}
Â  Â  Â  <ScrollView contentContainerStyle={styles.container}>
Â  Â  Â  Â  <Text style={styles.instruction}>Select how you want to use the service. Delivery fees will be **estimated and added to your invoice by the shop**.
Â  Â  Â  Â  </Text>

Â  Â  Â  Â  {availableDeliveryOptions.length > 0 ? (
Â  Â  Â  Â  Â  availableDeliveryOptions.map((option) => (
Â  Â  Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  Â  Â  key={option.id}
Â  Â  Â  Â  Â  Â  Â  style={[
Â  Â  Â  Â  Â  Â  Â  Â  styles.card,
Â  Â  Â  Â  Â  Â  Â  Â  selectedDeliveryId === option.id && styles.cardSelected,
Â  Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  Â  Â  onPress={() => setSelectedDeliveryId(option.id)}
Â  Â  Â  Â  Â  Â  Â  activeOpacity={0.9}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <View style={styles.cardContent}>
Â  Â  Â  Â  Â  Â  Â  Â  {/* Icon Logic based on name/type */}
Â  Â  Â  Â  Â  Â  Â  Â  {option.name.includes("Drop-off") ? <Ionicons name="storefront" size={36} color="#004aad" /> :Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â option.name.includes("Delivery") ? <Ionicons name="bicycle" size={36} color="#004aad" /> :
Â  Â  Â  Â  Â  Â  Â  Â  Â option.name.includes("Pick-up") ? <FontAwesome5 name="truck" size={36} color="#004aad" /> :
Â  Â  Â  Â  Â  Â  Â  Â  Â <Ionicons name="options-outline" size={36} color="#004aad" />
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  <View style={{ flex: 1, marginLeft: 12 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Text
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={[
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  styles.cardTitle,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  selectedDeliveryId === option.id && { color: "#004aad" },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >{option.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.cardDesc}>{option.description}</Text>
Â  Â  Â  Â  Â  Â  Â  Â  </View>

Â  Â  Â  Â  Â  Â  Â  Â  {/* Checkmark if selected */}
Â  Â  Â  Â  Â  Â  Â  Â  {selectedDeliveryId === option.id && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Ionicons name="checkmark-circle" size={22} color="#004aad" />
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  Â  Â  <Text
Â  Â  Â  Â  Â  Â  Â  Â  style={[
Â  Â  Â  Â  Â  Â  Â  Â  Â  styles.feeText,
Â  Â  Â  Â  Â  Â  Â  Â  Â  selectedDeliveryId === option.id && { color: "#004aad" },
Â  Â  Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  Â  Â  >{getFeeDisplay(option)}
Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <Text style={styles.noDataText}>No delivery options available for this shop.</Text>
Â  Â  Â  Â  )}
Â  Â  Â  </ScrollView>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* ðŸ”‘ DEBUG DISPLAY */}
Â  Â  Â  Â  <View style={styles.debugContainer}>
Â  Â  Â  Â  Â  Â  <Text style={styles.debugTitle}>DEBUG DATA (Handover Payload)</Text>
Â  Â  Â  Â  Â  Â  <Text style={styles.debugText}>
Â  Â  Â  Â  Â  Â  Â  Â  {JSON.stringify(debugData, null, 2)}
Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  <Text style={styles.debugNote}>
Â  Â  Â  Â  Â  Â  Â  Â  Note: Lists are passed as raw strings (Chain) to prevent corruption.
Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  </View>

Â  Â  Â  {/* Order Button */}
Â  Â  Â  <View style={styles.footer}>
Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  style={[
Â  Â  Â  Â  Â  Â  styles.paymentButton,
Â  Â  Â  Â  Â  Â  !selectedDeliveryId && { backgroundColor: "#ccc" },
Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  onPress={handleOrder}
Â  Â  Â  Â  Â  disabled={!selectedDeliveryId}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <Text style={styles.paymentText}>
Â  Â  Â  Â  Â  Â  {selectedDetails
Â  Â  Â  Â  Â  Â  Â  ? `Confirm ${selectedDetails.name}`
Â  Â  Â  Â  Â  Â  Â  : "Select an option"}
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  </View>
Â  Â  </SafeAreaView>
Â  );
}

const styles = StyleSheet.create({
Â  safeArea: { flex: 1, backgroundColor: "#fff" },
Â  container: { padding: 20, paddingBottom: 120 },
Â  loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
Â  headerTitle: {
Â  Â  color: "#2d2d2dff",
Â  Â  fontSize: 20,
Â  Â  fontWeight: "600",
Â  Â  marginLeft: 20,
Â  },
Â  instruction: {
Â  Â  textAlign: "center",
Â  Â  marginVertical: 15,
Â  Â  fontSize: 14,
Â  Â  color: "#333",
Â  Â  lineHeight: 20,
Â  },
Â  card: {
Â  Â  backgroundColor: "#fff",
Â  Â  borderWidth: 1,
Â  Â  borderColor: "#ccc",
Â  Â  borderRadius: 12,
Â  Â  padding: 16,
Â  Â  marginBottom: 15,
Â  Â  shadowColor: "#000",
Â  Â  shadowOffset: { width: 0, height: 2 },
Â  Â  shadowOpacity: 0.1,
Â  Â  shadowRadius: 3,
Â  Â  elevation: 2,
Â  },
Â  cardSelected: {
Â  Â  borderColor: "#004aad",
Â  Â  borderWidth: 2,
Â  Â  backgroundColor: "#E3F2FD", 
Â  },
Â  cardContent: {
Â  Â  flexDirection: "row",
Â  Â  alignItems: "center",
Â  Â  marginBottom: 12,
Â  },
Â  cardTitle: { fontSize: 16, fontWeight: "bold", color: "#000" },
Â  cardDesc: { fontSize: 13, color: "#555", marginTop: 2 },
Â  feeText: { fontSize: 14, fontWeight: "600", color: "#004aad" },
Â  noDataText: { fontSize: 14, color: '#888', fontStyle: 'italic', paddingVertical: 10, textAlign: 'center' },
Â  footer: {
Â  Â  position: "absolute",
Â  Â  bottom: 0,
Â  Â  left: 0,
Â  Â  right: 0,
Â  Â  padding: 15,
Â  Â  backgroundColor: "#fff",
Â  Â  borderTopWidth: 1,
Â  Â  borderColor: "#eee",
Â  },
Â  paymentButton: {
Â  Â  backgroundColor: "#004aad",
Â  Â  paddingVertical: 16,
Â  Â  borderRadius: 25,
Â  Â  alignItems: "center",
Â  Â  shadowColor: "#000",
Â  Â  shadowOpacity: 0.15,
Â  Â  shadowRadius: 5,
Â  Â  elevation: 3,
Â  },
Â  paymentText: { color: "#fff", fontSize: 16, fontWeight: "bold" },
// ðŸ”‘ NEW DEBUG STYLES
Â  Â  debugContainer: {
Â  Â  Â  Â  marginTop: 20,
        marginBottom: 100,
Â  Â  Â  Â  padding: 10,
Â  Â  Â  Â  backgroundColor: '#f0f0f0',
Â  Â  Â  Â  borderRadius: 5,
Â  Â  Â  Â  borderWidth: 1,
Â  Â  Â  Â  borderColor: '#ccc',
Â  Â  },
Â  Â  debugTitle: {
Â  Â  Â  Â  fontSize: 14,
Â  Â  Â  Â  fontWeight: 'bold',
Â  Â  Â  Â  marginBottom: 5,
Â  Â  Â  Â  color: '#444'
Â  Â  },
Â  Â  debugText: {
Â  Â  Â  Â  fontSize: 12,
Â  Â  Â  Â  color: '#222',
Â  Â  Â  Â  fontFamily: 'monospace',
Â  Â  },
Â  Â  debugNote: {
Â  Â  Â  Â  fontSize: 10,
Â  Â  Â  Â  marginTop: 5,
Â  Â  Â  Â  color: '#888'
Â  Â  }
});