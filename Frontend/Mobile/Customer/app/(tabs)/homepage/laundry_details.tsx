// laundry_details.tsx (UPDATED: Corrected chain data management)
import { Ionicons } from "@expo/vector-icons";
import { Stack, useLocalSearchParams, useRouter } from "expo-router";
import React, { useState, useMemo } from "react";
import {
Â  Pressable,
Â  SafeAreaView,
Â  StyleSheet,
Â  Text,
Â  TextInput,
Â  TouchableOpacity,
Â  View,
Â  ScrollView,
Â  Alert,
} from "react-native";

// ðŸ”‘ Import necessary interfaces: AddOn and FabricType
import { AddOn, FabricType, Service } from "@/lib/shops"; // Added Service for robust internal parsing

// --- Helper Function to safely parse JSON arrays ---
function safeParseParams<T>(param: string | string[] | undefined): T[] {
    if (typeof param === 'string') {
        try {
            return JSON.parse(param) as T[];
        } catch (e) {
            console.error("Failed to parse navigation param:", e);
            return [];
        }
    }
    return [];
}


export default function LaundryDetails() {
Â  const router = useRouter();
Â  const params = useLocalSearchParams();

Â  // 1. RECEIVE ALL NECESSARY PARAMS (For Payload and Chaining)
Â  const shopId = params.shopId as string;
Â  const shopName = params.shopName as string;
Â  // Critical incoming data to be passed forward (stored as raw strings):
Â  const SvcID = params.SvcID as string;
Â  
Â  // ðŸ”‘ CRITICAL FIX 1: Store all incoming lists as raw strings for perfect re-passing
Â  const availableServicesChain = params.availableServices as string;
Â  const availableAddOnsChain = params.availableAddOns as string;
Â  const availableDeliveryOptionsChain = params.availableDeliveryOptions as string;
Â  const availableFabricTypesChain = params.availableFabricTypes as string;


Â  // 2. PARSE DYNAMIC LISTS (For on-screen use only)
Â  
Â  // Parse the list of available services (Used only for debug/checking here)
Â  const availableServices: Service[] = useMemo(() => {
Â  Â  return safeParseParams<Service>(availableServicesChain);
Â  }, [availableServicesChain]);

Â  // Parse the list of available Add-Ons (Used for rendering selection)
Â  const availableAddOns: AddOn[] = useMemo(() => {
Â  Â  return safeParseParams<AddOn>(availableAddOnsChain);
Â  }, [availableAddOnsChain]);

Â  // Parse Fabric Types for selection (Used for rendering selection)
Â  const dynamicFabricTypes: FabricType[] = useMemo(() => {
Â  Â  return safeParseParams<FabricType>(availableFabricTypesChain);
Â  }, [availableFabricTypesChain]);


Â  // 3. COLLECT INPUTS 
Â  const [selectedFabricIDs, setSelectedFabricIDs] = useState<string[]>([]);
Â  const [selectedAddOnIDs, setSelectedAddOnIDs] = useState<string[]>([]); 
Â  const [instructions, setInstructions] = useState("");


Â  const toggleFabric = (fabricID: string) => {
Â  Â  setSelectedFabricIDs((prev) =>
Â  Â  Â  prev.includes(fabricID) ? prev.filter((f) => f !== fabricID) : [...prev, fabricID]
Â  Â  );
Â  };

Â  const toggleAddon = (addonID: string) => { 
Â  Â  setSelectedAddOnIDs((prev) =>
Â  Â  Â  prev.includes(addonID) ? prev.filter((a) => a !== addonID) : [...prev, addonID]
Â  Â  );
Â  };

Â  const handleConfirm = () => {
Â  Â  
Â  Â  if (selectedFabricIDs.length === 0) {
Â  Â  Â  Alert.alert("Required", "Please select at least one fabric type.");
Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  // 4. PASS ALL COLLECTED DATA (AND PREVIOUS CHAIN DATA) TO NEXT SCREEN
Â  Â  router.push({
Â  Â  Â  pathname: "/homepage/df_payment",
Â  Â  Â  params: {
Â  Â  Â  Â  // Previous Data Chain (CRITICAL to re-pass the original RAW STRINGS)
Â  Â  Â  Â  shopId: shopId,
Â  Â  Â  Â  shopName: shopName,
Â  Â  Â  Â  SvcID: SvcID, 
Â  Â  Â  Â  
Â  Â  Â  Â  // ðŸ”‘ CRITICAL FIX 2: Pass the raw, unchanged incoming JSON strings forward.
Â  Â  Â  Â  availableServices: availableServicesChain, 
Â  Â  Â  Â  availableAddOns: availableAddOnsChain, 
Â  Â  Â  Â  availableDeliveryOptions: availableDeliveryOptionsChain, 
Â  Â  Â  Â  availableFabricTypes: availableFabricTypesChain,

Â  Â  Â  Â  // New Collected Data (CRITICAL for payload)
Â  Â  Â  Â  fabrics: JSON.stringify(selectedFabricIDs), // Array of Fabric IDs
Â  Â  Â  Â  addons: JSON.stringify(selectedAddOnIDs), // Array of AddOn IDs
Â  Â  Â  Â  instructions: instructions,
Â  Â  Â  },
Â  Â  });
Â  };
Â  Â  
Â  Â  // ðŸ”‘ DEBUG: Assemble data for display (now checking against the parsed Services list)
Â  Â  const debugData = {
Â  Â  Â  Â  SvcID_IN: SvcID,
Â  Â  Â  Â  Fabrics_OUT: selectedFabricIDs,
Â  Â  Â  Â  AddOns_OUT: selectedAddOnIDs,
Â  Â  Â  Â  Instructions: instructions,
Â  Â  Â  Â  // Using a reliable check against the internal parsed arrays
Â  Â  Â  Â  Lists_Status: `Svc:${availableServices.length > 0}, AddOns:${availableAddOns.length > 0}, Fabrics:${dynamicFabricTypes.length > 0}`,
Â  Â  };


Â  return (
Â  Â  <SafeAreaView style={styles.safeArea}>
Â  Â  Â  <Stack.Screen
Â  Â  Â  Â  options={{
Â  Â  Â  Â  Â  headerShown: true,
Â  Â  Â  Â  Â  headerStyle: { backgroundColor: "#89CFF0" },
Â  Â  Â  Â  Â  headerTitleAlign: "left",
Â  Â  Â  Â  Â  headerTintColor: "#2d2d2dff",
Â  Â  Â  Â  Â  headerLeft: () => (
Â  Â  Â  Â  Â  Â  <TouchableOpacity onPress={() => router.back()}>
Â  Â  Â  Â  Â  Â  Â  <Ionicons name="arrow-back" size={24} color="#000" style={{ marginLeft: 10 }} />
Â  Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  Â  headerTitle: () => (
Â  Â  Â  Â  Â  Â  <Text style={styles.headerTitle}>Laundry Details</Text>
Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  }}
Â  Â  Â  />

Â  Â  Â  <ScrollView style={styles.wrapper} contentContainerStyle={styles.container}>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* WEIGHT ASSUMPTION NOTICE */}
Â  Â  Â  Â  <View style={styles.noticeBox}>
Â  Â  Â  Â  Â  <Ionicons name="information-circle-outline" size={20} color="#004aad" style={{ marginRight: 8 }} />
Â  Â  Â  Â  Â  <Text style={styles.noticeText}>Initial weight will be set by the system as an estimate for booking. Staff will weigh your laundry for final pricing.</Text>
Â  Â  Â  Â  </View>

Â  Â  Â  Â  {/* FABRIC SELECTION (Now dynamic) */}
Â  Â  Â  Â  <Text style={styles.sectionTitle}>Select Fabric Type(s)</Text>
Â  Â  Â  Â  {dynamicFabricTypes.length > 0 ? (
Â  Â  Â  Â  Â  dynamicFabricTypes.map((item) => ( 
Â  Â  Â  Â  Â  Â  <Pressable
Â  Â  Â  Â  Â  Â  Â  key={item.id}
Â  Â  Â  Â  Â  Â  Â  style={[
Â  Â  Â  Â  Â  Â  Â  Â  styles.optionRow,
Â  Â  Â  Â  Â  Â  Â  Â  selectedFabricIDs.includes(item.id) && styles.selectedOption,
Â  Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  Â  Â  onPress={() => toggleFabric(item.id)}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <Ionicons
Â  Â  Â  Â  Â  Â  Â  Â  name={ selectedFabricIDs.includes(item.id) ? "checkbox" : "square-outline" }
Â  Â  Â  Â  Â  Â  Â  Â  size={20}
Â  Â  Â  Â  Â  Â  Â  Â  color={selectedFabricIDs.includes(item.id) ? "#004aad" : "#0D47A1"}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <Text
Â  Â  Â  Â  Â  Â  Â  Â  style={[
Â  Â  Â  Â  Â  Â  Â  Â  Â  styles.optionText,
Â  Â  Â  Â  Â  Â  Â  Â  Â  selectedFabricIDs.includes(item.id) && { fontWeight: "700", color: "#004aad" },
Â  Â  Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  Â  Â  >{item.name}
Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  </Pressable>
Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <Text style={styles.noDataText}>No fabric types available for this shop.</Text>
Â  Â  Â  Â  )}


Â  Â  Â  Â  {/* ADD-ONS SELECTION (Using dynamic AddOn list) */}
Â  Â  Â  Â  <Text style={styles.sectionTitle}>Add-ons</Text>
Â  Â  Â  Â  {availableAddOns.length > 0 ? (
Â  Â  Â  Â  Â  availableAddOns.map((addon) => (
Â  Â  Â  Â  Â  Â  <Pressable
Â  Â  Â  Â  Â  Â  Â  key={addon.id} 
Â  Â  Â  Â  Â  Â  Â  style={[
Â  Â  Â  Â  Â  Â  Â  Â  styles.optionRow,
Â  Â  Â  Â  Â  Â  Â  Â  selectedAddOnIDs.includes(addon.id) && styles.selectedOption, 
Â  Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  Â  Â  onPress={() => toggleAddon(addon.id)} 
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <Ionicons
Â  Â  Â  Â  Â  Â  Â  Â  name={selectedAddOnIDs.includes(addon.id) ? "checkbox" : "square-outline"} 
Â  Â  Â  Â  Â  Â  Â  Â  size={20}
Â  Â  Â  Â  Â  Â  Â  Â  color={selectedAddOnIDs.includes(addon.id) ? "#004aad" : "#0D47A1"} 
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <Text
Â  Â  Â  Â  Â  Â  Â  Â  style={[
Â  Â  Â  Â  Â  Â  Â  Â  Â  styles.optionText,
Â  Â  Â  Â  Â  Â  Â  Â  Â  selectedAddOnIDs.includes(addon.id) && { fontWeight: "700", color: "#004aad" }, 
Â  Â  Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  Â  Â  >{addon.name} (â‚±{parseFloat(String(addon.price)).toFixed(2)})
Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  </Pressable>
Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <Text style={styles.noDataText}>No add-ons available for this shop.</Text>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {/* SPECIAL INSTRUCTIONS */}
Â  Â  Â  Â  <Text style={styles.sectionTitle}>Special Instructions</Text>
Â  Â  Â  Â  <TextInput
Â  Â  Â  Â  Â  style={styles.instructionsInput}
Â  Â  Â  Â  Â  placeholder="E.g., Wash separately, do not tumble dry..."
Â  Â  Â  Â  Â  value={instructions}
Â  Â  Â  Â  Â  onChangeText={setInstructions}
Â  Â  Â  Â  Â  multiline
Â  Â  Â  Â  Â  numberOfLines={4}
Â  Â  Â  Â  />
Â  Â  Â  Â  
Â  Â  Â  Â  {/* ðŸ”‘ DEBUG DISPLAY */}
Â  Â  Â  Â  <View style={styles.debugContainer}>
Â  Â  Â  Â  Â  Â  <Text style={styles.debugTitle}>DEBUG DATA (Handover Payload)</Text>
Â  Â  Â  Â  Â  Â  <Text style={styles.debugText}>
Â  Â  Â  Â  Â  Â  Â  Â  {JSON.stringify(debugData, null, 2)}
Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  <Text style={styles.debugNote}>
Â  Â  Â  Â  Â  Â  Â  Â  Note: Raw list strings are passed forward, ensuring data integrity for the summary screen.
Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  </View>

Â  Â  Â  </ScrollView>

Â  Â  Â  <View style={styles.footer}>
Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  style={[ styles.confirmBtn, selectedFabricIDs.length === 0 && styles.disabledBtn ]}
Â  Â  Â  Â  Â  onPress={handleConfirm}
Â  Â  Â  Â  Â  disabled={selectedFabricIDs.length === 0}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <Text style={styles.confirmText}>Confirm Details and Choose Delivery</Text>
Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  </View>
Â  Â  </SafeAreaView>
Â  );
}

const styles = StyleSheet.create({
Â  safeArea: { flex: 1, backgroundColor: "#fff" },
Â  wrapper: { flex: 1 },
Â  container: { padding: 20, paddingBottom: 100 },
Â  headerTitle: { color: "#2d2d2dff", fontSize: 20, fontWeight: "600", marginLeft: 20 },
Â  sectionTitle: { fontSize: 16, fontWeight: "700", marginVertical: 10, color: "#1c3d63" },
Â  
Â  // NEW: Notice box styles
Â  noticeBox: {
Â  Â  flexDirection: 'row',
Â  Â  alignItems: 'center',
Â  Â  backgroundColor: '#E3F2FD',
Â  Â  padding: 12,
Â  Â  borderRadius: 8,
Â  Â  marginBottom: 15,
Â  Â  borderWidth: 1,
Â  Â  borderColor: '#BBDEFB',
Â  },
Â  noticeText: {
Â  Â  fontSize: 13,
Â  Â  color: '#004aad',
Â  Â  flexShrink: 1,
Â  },

Â  // Selection Rows
Â  optionRow: { flexDirection: "row", alignItems: "center", marginVertical: 4, padding: 10, borderRadius: 8, borderWidth: 1, borderColor: '#eee' },
Â  selectedOption: { backgroundColor: "#E3F2FD", borderColor: '#BBDEFB' },
Â  optionText: { marginLeft: 10, fontSize: 15, color: "#2d2d2dff" },
Â  noDataText: { fontSize: 14, color: '#888', fontStyle: 'italic', paddingVertical: 10, textAlign: 'center' },
Â  
Â  // Instructions Input
Â  instructionsInput: {
Â  Â  borderWidth: 1,
Â  Â  borderColor: "#ccc",
Â  Â  borderRadius: 5,
Â  Â  padding: 10,
Â  Â  marginVertical: 10,
Â  Â  textAlignVertical: "top",
Â  Â  minHeight: 80,
Â  Â  backgroundColor: '#f9f9f9',
Â  },
Â  
Â  // Footer and Button
Â  footer: { padding: 15, backgroundColor: "#fff", borderTopWidth: 1, borderColor: '#eee' },
Â  confirmBtn: { backgroundColor: "#004aad", padding: 15, borderRadius: 25, alignItems: "center" },
Â  disabledBtn: { backgroundColor: "#ccc" },
Â  confirmText: { color: "#fff", fontSize: 16, fontWeight: "600" },
Â  Â  
Â  Â  // ðŸ”‘ NEW DEBUG STYLES
Â  Â  debugContainer: {
Â  Â  Â  Â  marginTop: 20,
Â  Â  Â  Â  padding: 10,
Â  Â  Â  Â  backgroundColor: '#f0f0f0',
Â  Â  Â  Â  borderRadius: 5,
Â  Â  },
Â  Â  debugTitle: {
Â  Â  Â  Â  fontSize: 14,
Â  Â  Â  Â  fontWeight: 'bold',
Â  Â  Â  Â  marginBottom: 5,
Â  Â  Â  Â  color: '#444'
Â  Â  },
Â  Â  debugText: {
Â  Â  Â  Â  fontSize: 12,
Â  Â  Â  Â  color: '#222',
Â  Â  Â  Â  fontFamily: 'monospace',
Â  Â  },
Â  Â  debugNote: {
Â  Â  Â  Â  fontSize: 10,
Â  Â  Â  Â  marginTop: 5,
Â  Â  Â  Â  color: '#888'
Â  Â  }
});