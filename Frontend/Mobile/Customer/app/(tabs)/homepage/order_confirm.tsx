// order_confirm.tsx

import { Ionicons } from "@expo/vector-icons";
import { Stack, useLocalSearchParams, useRouter, useFocusEffect } from "expo-router";
import AsyncStorage from "@react-native-async-storage/async-storage";
import React, { useState, useCallback } from "react";
import {
Â  SafeAreaView, 
Â  ScrollView,
Â  StyleSheet,
Â  Text,
Â  TouchableOpacity,
Â  View, 
Â  Alert,
Â  ActivityIndicator,
} from "react-native";

// ðŸ”‘ CRITICAL IMPORTS
import { UserDetails } from "@/lib/auth"; 
import { CreateOrderPayload, createNewOrder } from "@/lib/orders"; 


export default function OrderConfirmationScreen() {
Â  const router = useRouter();
Â  const params = useLocalSearchParams();

Â  // --- STATE ---
Â  const [isLoading, setIsLoading] = useState(false);
Â  const [submitSuccess, setSubmitSuccess] = useState(false);
Â  const [finalOrderId, setFinalOrderId] = useState('');
Â  const [customerId, setCustomerId] = useState<string | null>(null);

Â  // --- PARSE INCOMING PAYLOAD DATA ---
Â  // ðŸ”‘ FIX 1: Removed deliveryFee from destructuring since order_summary stopped passing it.
Â  const { 
        shopId, shopName, weight, deliveryId, deliveryOptionName, 
        SvcID, fabrics, addons, instructions, grandTotal // GrandTotal is for display
    } = params;

Â  // Correctly parse stringified arrays/objects
Â  const parsedFabrics: string[] = fabrics ? JSON.parse(fabrics as string) : [];
Â  const parsedAddons: string[] = addons ? JSON.parse(addons as string) : [];
Â  const parsedInstructions: string = instructions as string || '';


Â  // --- HOOKS ---
Â  useFocusEffect(
Â  Â  useCallback(() => {
Â  Â  Â  // Fetch Customer ID (CustID) from AsyncStorage
Â  Â  Â  const fetchUser = async () => {
Â  Â  Â  Â  const userJson = await AsyncStorage.getItem('user');
Â  Â  Â  Â  if (userJson) {
Â  Â  Â  Â  Â  const user: UserDetails = JSON.parse(userJson);
Â  Â  Â  Â  Â  setCustomerId(user.UserID); 
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Alert.alert("Authentication Error", "Please log in again.");
Â  Â  Â  Â  Â  router.replace('/');
Â  Â  Â  Â  }
Â  Â  Â  };
Â  Â  Â  fetchUser();
Â  Â  }, [])
Â  );


Â  // --- FINAL SUBMISSION LOGIC ---
Â  const handleSubmission = async () => {
Â  Â  if (isLoading || submitSuccess || !customerId) return;

Â  Â  // 1. Final Payload Validation
Â  Â  if (!shopId || !SvcID || !deliveryId || !weight || parsedFabrics.length === 0) {
Â  Â  Â  Alert.alert("Error", "Missing required order information. Cannot submit.");
Â  Â  Â  return;
Â  Â  }

Â  Â  setIsLoading(true);

Â  Â  try {
Â  Â  Â  // 2. Assemble the final payload based on the CreateOrderPayload interface
Â  Â  Â  const payload: CreateOrderPayload = {
Â  Â  Â  Â  CustID: customerId,
Â  Â  Â  Â  ShopID: shopId as string,
Â  Â  Â  Â  SvcID: SvcID as string,
Â  Â  Â  Â  deliveryId: deliveryId as string,
Â  Â  Â  Â  weight: parseFloat(weight as string), // The estimated weight
Â  Â  Â  Â  instructions: parsedInstructions,
Â  Â  Â  Â  fabrics: parsedFabrics, // Array of FabTypeIDs
Â  Â  Â  Â  addons: parsedAddons // Array of AddOnIDs
Â  Â  Â  };

Â  Â  Â  // 3. Call the API function from lib/orders.ts
Â  Â  Â  console.log("Submitting Order Payload:", payload);
Â  Â  Â  const response = await createNewOrder(payload);

Â  Â  Â  if (response.success && response.orderId) {
Â  Â  Â  Â  setFinalOrderId(response.orderId);
Â  Â  Â  Â  setSubmitSuccess(true);
Â  Â  Â  } else {
Â  Â  Â  Â  Alert.alert("Submission Failed", response.message || "An unknown error occurred on the server.");
Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  }
Â  Â  } catch (error: any) {
Â  Â  Â  console.error("API Submission Error:", error);
Â  Â  Â  Alert.alert("Network Error", error.message || "Could not connect to the server.");
Â  Â  Â  setIsLoading(false);
Â  Â  }
Â  };
Â  
Â  // --- DISPLAY COMPONENTS ---
Â  const displayFabrics = parsedFabrics.join(', ');
Â  const displayAddons = parsedAddons.join(', ');
Â  
Â  const isButtonDisabled = isLoading || submitSuccess || !customerId;

Â  return (
Â  Â  // ðŸ”‘ Use standard View as container
Â  Â  <View style={styles.safeArea}>
Â  Â  Â  <Stack.Screen
Â  Â  Â  Â  options={{
Â  Â  Â  Â  Â  headerShown: true,
Â  Â  Â  Â  Â  headerStyle: { backgroundColor: "#89CFF0" },
Â  Â  Â  Â  Â  headerShadowVisible: false,
Â  Â  Â  Â  Â  headerTintColor: "#2d2d2dff",
Â  Â  Â  Â  Â  headerTitle: () => (
Â  Â  Â  Â  Â  Â  <Text style={styles.headerTitle}>{submitSuccess ? "Order Confirmed" : "Final Submission"}</Text>
Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  Â  headerLeft: () => (
Â  Â  Â  Â  Â  Â  // Disable back button after success or during submission
Â  Â  Â  Â  Â  Â  <TouchableOpacity onPress={() => router.back()} disabled={isButtonDisabled || submitSuccess}>
Â  Â  Â  Â  Â  Â  Â  <Ionicons name="arrow-back" size={24} color={isButtonDisabled ? "#999" : "#000"} style={{ marginLeft: 10 }} />
Â  Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  }}
Â  Â  Â  />

Â  Â  Â  <ScrollView style={styles.container} contentContainerStyle={{ paddingBottom: 120 }}>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Submission Status Card */}
Â  Â  Â  Â  <View style={[styles.card, submitSuccess ? styles.successCard : styles.pendingCard]}>
Â  Â  Â  Â  Â  <View style={styles.rowBetween}>
Â  Â  Â  Â  Â  Â  <Text style={styles.submissionTitle}>
Â  Â  Â  Â  Â  Â  Â  {submitSuccess ? 'Order Submitted Successfully!' : 'Review & Submit'}
Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  {submitSuccess && <Ionicons name="checkmark-circle" size={24} color="#4CAF50" />}
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  <Text style={styles.submissionDetail}>
Â  Â  Â  Â  Â  Â  {submitSuccess 
Â  Â  Â  Â  Â  Â  Â  ? `Your Order ID is ${finalOrderId}. It is now pending shop confirmation.` 
Â  Â  Â  Â  Â  Â  Â  : `Final check before submitting your order to ${shopName || 'the shop'}.`}
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  </View>

Â  Â  Â  Â  {/* Details Summary */}
Â  Â  Â  Â  <View style={styles.card}>
Â  Â  Â  Â  Â  <Text style={styles.sectionTitle}>Order Details</Text>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  <Text style={styles.subTitle}>Service & Weight</Text>
Â  Â  Â  Â  Â  <Text style={styles.listItem}>â€¢ Service ID: {SvcID || 'N/A'}</Text>
Â  Â  Â  Â  Â  <Text style={styles.listItem}>â€¢ Estimated Weight: {weight || '1'} kg</Text>

Â  Â  Â  Â  Â  <Text style={styles.subTitle}>Delivery</Text>
Â  Â  Â  Â  Â  <Text style={styles.listItem}>â€¢ Option: {deliveryOptionName || 'N/A'}</Text>
Â  Â  Â  Â  Â  <Text style={styles.listItem}>â€¢ Fee: â‚± 0.00 (Set by staff later)</Text> 
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  <Text style={styles.subTitle}>Laundry Details</Text>
Â  Â  Â  Â  Â  <Text style={styles.listItem}>â€¢ Fabrics (IDs): {displayFabrics || 'None'}</Text>
Â  Â  Â  Â  Â  <Text style={styles.listItem}>â€¢ Add-Ons (IDs): {displayAddons || 'None'}</Text>
Â  Â  Â  Â  Â  <Text style={styles.listItem}>â€¢ Instructions: {parsedInstructions || 'None'}</Text>
          <Text style={[styles.listItem, {fontWeight: 'bold', marginTop: 10}]}>â€¢ Grand Total: â‚±{grandTotal || '0.00'}</Text>


Â  Â  Â  Â  </View>
Â  Â  Â  </ScrollView>

Â  Â  Â  {/* Action Button */}
Â  Â  Â  <View style={styles.footer}>
Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  style={[styles.button, isButtonDisabled && styles.disabledButton, submitSuccess && styles.successButton]}
Â  Â  Â  Â  Â  onPress={submitSuccess ? () => router.dismissAll() : handleSubmission}
Â  Â  Â  Â  Â  disabled={isButtonDisabled}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {isLoading ? (
Â  Â  Â  Â  Â  Â  <ActivityIndicator color="#fff" />
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <Text style={styles.buttonText}>
Â  Â  Â  Â  Â  Â  Â  {submitSuccess ? "Back to Home" : `Place Final Order (â‚±${grandTotal || '0.00'})`}
Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  </View>
Â  Â  </View>
Â  );
}

const styles = StyleSheet.create({
Â  safeArea: { flex: 1, backgroundColor: "#fff" },
Â  container: { flex: 1, paddingHorizontal: 16, paddingTop: 20 },
Â  rowBetween: {
Â  Â  flexDirection: "row",
Â  Â  justifyContent: "space-between",
Â  Â  marginBottom: 10,
Â  },
Â  headerTitle: {
Â  Â  color: "#2d2d2dff",
Â  Â  fontSize: 20,
Â  Â  fontWeight: "600",
Â  Â  marginLeft: 20,
Â  },
Â  card: {
Â  Â  backgroundColor: "#f9f9f9",
Â  Â  padding: 15,
Â  Â  borderRadius: 12,
Â  Â  marginBottom: 15,
Â  Â  shadowColor: "#000",
Â  Â  shadowOpacity: 0.05,
Â  Â  shadowRadius: 4,
Â  Â  elevation: 2,
Â  },
Â  pendingCard: { borderColor: '#BBDEFB', borderWidth: 1 },
Â  successCard: { borderColor: '#4CAF50', borderWidth: 1, backgroundColor: '#E8F5E9' },
Â  submissionTitle: { fontSize: 18, fontWeight: '700', color: '#333' },
Â  submissionDetail: { fontSize: 14, color: '#555', marginTop: 5 },
Â  date: { fontSize: 12, color: "#666" },
Â  sectionTitle: {
Â  Â  fontSize: 16,
Â  Â  fontWeight: "600",
Â  Â  marginBottom: 10,
Â  Â  color: "#004aad",
Â  },
Â  subTitle: {
Â  Â  fontSize: 14,
Â  Â  fontWeight: "500",
Â  Â  marginTop: 10,
Â  Â  marginBottom: 6,
Â  Â  color: "#004aad",
Â  },
Â  listItem: { fontSize: 14, marginBottom: 4, color: "#333" },
Â  footer: {
Â  Â  position: "absolute",
Â  Â  bottom: 0,
Â  Â  left: 0,
Â  Â  right: 0,
Â  Â  padding: 15,
Â  Â  backgroundColor: "#fff",
Â  Â  borderTopWidth: 1,
Â  Â  borderColor: "#eee",
Â  },
Â  button: {
Â  Â  backgroundColor: "#004aad",
Â  Â  paddingVertical: 16,
Â  Â  borderRadius: 25,
Â  Â  alignItems: "center",
Â  Â  shadowColor: "#000",
Â  Â  shadowOpacity: 0.1,
Â  Â  shadowRadius: 6,
Â  Â  elevation: 3,
Â  },
Â  successButton: {
Â  Â  backgroundColor: '#4CAF50',
Â  },
Â  disabledButton: {
Â  Â  backgroundColor: '#ccc',
Â  },
Â  buttonText: { color: "#fff", fontSize: 16, fontWeight: "bold" },
});