// order_summary.tsx 

import { Ionicons } from "@expo/vector-icons";
import { Stack, useLocalSearchParams, useRouter, useFocusEffect } from "expo-router";
import React, { useState, useMemo, useCallback } from "react";
import {
Â  SafeAreaView,
Â  ScrollView,
Â  StyleSheet,
Â  Text,
Â  TouchableOpacity,
Â  View,
Â  Alert, // Added Alert
Â  ActivityIndicator,
} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";

// CRITICAL IMPORTS
import { UserDetails } from "@/lib/auth"; 
import { CreateOrderPayload, createNewOrder } from "@/lib/orders"; 
import { Service, AddOn, FabricType } from "@/lib/shops";


// --- Helper Functions ---
function safeParseParams<T>(param: string | string[] | undefined): T[] {
Â  Â  if (typeof param === 'string') {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  return JSON.parse(param) as T[];
Â  Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  Â  console.error("Failed to parse navigation param:", e);
Â  Â  Â  Â  Â  Â  return [];
Â  Â  Â  Â  }
Â  Â  }
Â  Â  return [];
}

const getFeeDisplay = (deliveryOptionName: string) => {
Â  Â  if (deliveryOptionName && deliveryOptionName.toLowerCase().includes("drop-off")) {
Â  Â  Â  Â  return "â‚± 0.00 (Free)";
Â  Â  }
Â  Â  return "Fee to be confirmed";
};

const getFabricNames = (selectedIds: string[], availableTypes: FabricType[]) => {
Â  Â  return selectedIds.map(id => {
Â  Â  Â  Â  const type = availableTypes.find(ft => ft.id === id);
Â  Â  Â  Â  return type ? type.name : `ID: ${id}`;
Â  Â  });
};


export default function OrderSummaryScreen() {
Â  const router = useRouter();
Â  const params = useLocalSearchParams();

Â  // --- STATE ---
Â  const [isLoading, setIsLoading] = useState(false);
Â  const [submitSuccess, setSubmitSuccess] = useState(false);
Â  const [finalOrderId, setFinalOrderId] = useState('');
Â  const [customerId, setCustomerId] = useState<string | null>(null);

Â  // --- DATA PARSING ---
Â  const { shopId, shopName, deliveryId, deliveryOptionName, SvcID } = params;
Â  const fabrics: string[] = safeParseParams<string>(params.fabrics);
Â  const addons: string[] = safeParseParams<string>(params.addons);
Â  const instructions = params.instructions as string || ''; 

Â  const availableServices: Service[] = safeParseParams<Service>(params.availableServices);
Â  const availableAddOns: AddOn[] = safeParseParams<AddOn>(params.availableAddOns);
Â  const availableFabricTypes: FabricType[] = safeParseParams<FabricType>(params.availableFabricTypes);
Â  
Â  const selectedServiceDetail = useMemo(() => availableServices.find(svc => svc.id === SvcID), [availableServices, SvcID]);
Â  
Â  // --- FETCH CUSTOMER ID HOOK ---
Â  useFocusEffect(
Â  Â  useCallback(() => {
Â  Â  Â  const fetchUser = async () => {
Â  Â  Â  Â  const userJson = await AsyncStorage.getItem('user');
Â  Â  Â  Â  if (userJson) {
Â  Â  Â  Â  Â  const user: UserDetails = JSON.parse(userJson);
Â  Â  Â  Â  Â  setCustomerId(user.UserID); 
Â  Â  Â  Â  }
Â  Â  Â  };
Â  Â  Â  fetchUser();
Â  Â  }, [])
Â  );

Â  const initialWeight = 0;


Â  const summary = useMemo(() => {
Â  Â  // ðŸ”‘ 2. Base Price is the fixed Service Price (not multiplied by estimated weight)
Â  Â  let basePrice = selectedServiceDetail ? parseFloat(String(selectedServiceDetail.price)) : 0; 
Â  Â  let addonTotal = 0;

Â  Â  addonTotal = availableAddOns
Â  Â  Â  .filter(addon => addons.includes(addon.id))
Â  Â  Â  .reduce((sum, addon) => sum + parseFloat(String(addon.price)), 0);

Â  Â  const finalDeliveryFee = 0.00; 
Â  Â  const subtotal = basePrice + addonTotal;
Â  Â  const grandTotal = subtotal + finalDeliveryFee;

Â  Â  return { basePrice, addonTotal, subtotal, finalDeliveryFee, grandTotal };
Â  }, [SvcID, addons, availableAddOns, selectedServiceDetail]);


Â  // --- CORE API SUBMISSION FUNCTION ---
Â  const submitOrderToBackend = async () => {
Â  Â  setIsLoading(true); 

Â  Â  try {
Â  Â  Â  Â  const payload: CreateOrderPayload = {
Â  Â  Â  Â  Â  Â  CustID: customerId as string,
Â  Â  Â  Â  Â  Â  ShopID: shopId as string,
Â  Â  Â  Â  Â  Â  SvcID: SvcID as string,
Â  Â  Â  Â  Â  Â  deliveryId: deliveryId as string,
Â  Â  Â  Â  Â  Â  weight: initialWeight, // Send estimated weight for BE booking purposes
Â  Â  Â  Â  Â  Â  instructions: instructions,
Â  Â  Â  Â  Â  Â  fabrics: fabrics,
Â  Â  Â  Â  Â  Â  addons: addons
Â  Â  Â  Â  };

Â  Â  Â  Â  const response = await createNewOrder(payload);

Â  Â  Â  Â  if (response.success && response.orderId) {
Â  Â  Â  Â  Â  Â  setFinalOrderId(response.orderId);
Â  Â  Â  Â  Â  Â  setSubmitSuccess(true);
Â  Â  Â  Â  Â  Â  setIsLoading(false); // Clear loading on success
Â  Â  Â  Â  Â  Â  
            // Success Pop-up: Show confirmation and navigation options
Â  Â  Â  Â  Â  Â  Alert.alert(
Â  Â  Â  Â  Â  Â  Â  Â  "âœ… Order Confirmed!",
Â  Â  Â  Â  Â  Â  Â  Â  `Your Order ID is ${response.orderId}.\nIt is now pending shop confirmation.`,
Â  Â  Â  Â  Â  Â  Â  Â  [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  text: "View Orders", 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onPress: () => router.replace('/(tabs)/homepage/homepage') 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  text: "Back to Home", 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onPress: () => router.dismissAll(),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style: 'cancel'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  Â  Â  );

Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Alert.alert("Submission Failed", response.message || "An unknown error occurred on the server.");
Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  }
Â  Â  } catch (error: any) {
Â  Â  Â  Â  console.error("API Submission Error:", error);
Â  Â  Â  Â  Alert.alert("Network Error", error.message || "Could not connect to the server.");
Â  Â  Â  Â  setIsLoading(false);
Â  Â  }
Â  };


Â  // --- CONFIRMATION WRAPPER (Triggers the Pop-up) ---
Â  const handleFinalSubmission = () => {
Â  Â  if (submitSuccess) {
        router.dismissAll();
        return;
    }
Â  Â  if (isLoading || !customerId) return;

Â  Â  // Initial Validation Check
Â  Â  if (!customerId) {
Â  Â  Â  Alert.alert("Error", "User not logged in. Please log in to submit the order.");
Â  Â  Â  return;
Â  Â  }
Â  Â  if (!shopId || !deliveryId || !SvcID || fabrics.length === 0) {
Â  Â  Â  Alert.alert("Error", "Critical order details are missing. Please go back.");
Â  Â  Â  return;
Â  Â  }

    const confirmationMessage = `You are about to place your order with ${shopName}.\n\nEstimated Total: â‚±${summary.grandTotal.toFixed(2)}\n\nDo you wish to confirm?`;

    // Show confirmation prompt before submitting
    Alert.alert(
        "Confirm Order Submission",
        confirmationMessage,
        [
            // Cancel Button
            {
                text: "Cancel",
                style: "cancel",
                onPress: () => console.log('Order submission cancelled.')
            },
            // Confirm Button (This triggers the API call)
            {
                text: "Confirm",
                style: "default",
                onPress: submitOrderToBackend 
            }
        ]
    );
Â  };

Â  
Â  const formattedDate = new Date().toLocaleDateString("en-US", { day: "2-digit", month: "short", year: "numeric" });
Â  
Â  const selectedServiceName = selectedServiceDetail ? selectedServiceDetail.name : 'No service selected';
Â  const selectedAddonNames = availableAddOns.filter(addon => addons.includes(addon.id)).map(addon => addon.name);
Â  const selectedFabricNames = getFabricNames(fabrics, availableFabricTypes); 
Â  
Â  const isButtonDisabled = isLoading || !customerId;


Â  return (
Â  Â  <SafeAreaView style={styles.safeArea}>
Â  Â  Â  <Stack.Screen
Â  Â  Â  Â  options={{
Â  Â  Â  Â  Â  headerShown: true,
Â  Â  Â  Â  Â  title: submitSuccess ? "Order Confirmed" : "Order Summary",
Â  Â  Â  Â  Â  headerStyle: { backgroundColor: "#89CFF0" },
Â  Â  Â  Â  Â  headerShadowVisible: false,
Â  Â  Â  Â  Â  headerTintColor: "#2d2d2dff",
Â  Â  Â  Â  Â  headerLeft: () => (
Â  Â  Â  Â  Â  Â  <TouchableOpacity onPress={() => router.back()} disabled={submitSuccess || isLoading}>
Â  Â  Â  Â  Â  Â  Â  <Ionicons name="arrow-back" size={24} color={submitSuccess || isLoading ? "#999" : "#000000ff"} style={{ marginLeft: 10 }} />
Â  Â  Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  Â  headerTitle: () => (
Â  Â  Â  Â  Â  Â  <Text style={styles.headerTitle}>{submitSuccess ? "Order Confirmed" : "Order Summary"}</Text>
Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  }}
Â  Â  Â  />

Â  Â  Â  {/* Scrollable content */}
Â  Â  Â  <ScrollView style={styles.container} contentContainerStyle={{ paddingBottom: 140 }}>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Shop and Order Info */}
Â  Â  Â  Â  <View style={[styles.card, styles.highlightCard]}>
Â  Â  Â  Â  Â  <Text style={styles.shopName}>{shopName || 'Shop Name'}</Text>
Â  Â  Â  Â  Â  <View style={styles.rowBetween}>
            <Text style={styles.orderId}>{finalOrderId}</Text>
Â  Â  Â  Â  Â  Â  <Text style={styles.date}>{formattedDate}</Text>
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  </View>

Â  Â  Â  Â  {/* Selected Services */}
Â  Â  Â  Â  <View style={styles.card}>
Â  Â  Â  Â  Â  <Text style={styles.sectionTitle}>ðŸ§º Selected Service</Text>
Â  Â  Â  Â  Â  <View style={styles.listGroup}>
Â  Â  Â  Â  Â  Â  <Text style={[styles.listItem, { fontWeight: 'bold' }]}>â€¢ {selectedServiceName}
Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  </View>

Â  Â  Â  Â  {/* Laundry Details */}
Â  Â  Â  Â  <View style={styles.card}>
Â  Â  Â  Â  Â  <Text style={styles.sectionTitle}>ðŸ§¾ Laundry Details</Text>

Â  Â  Â  Â  Â  {/* Fabrics */}
Â  Â  Â  Â  Â  <Text style={styles.subTitle}>Fabric Type(s)</Text>
Â  Â  Â  Â  Â  <View style={styles.listGroup}>
Â  Â  Â  Â  Â  Â  {selectedFabricNames.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  selectedFabricNames.map((fabricName: string, index: number) => ( 
Â  Â  Â  Â  Â  Â  Â  Â  <Text key={index} style={styles.listItem}>â€¢ {fabricName}</Text>
Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.emptyText}>â€¢ None</Text>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </View>

Â  Â  Â  Â  Â  {/* Add-ons */}
Â  Â  Â  Â  Â  <Text style={styles.subTitle}>Add-ons</Text>
Â  Â  Â  Â  Â  <View style={styles.listGroup}>
Â  Â  Â  Â  Â  Â  {selectedAddonNames.length > 0 ? (
Â  Â  Â  Â  Â  Â  Â  selectedAddonNames.map((addon: string, index: number) => (
Â  Â  Â  Â  Â  Â  Â  Â  <Text key={index} style={styles.listItem}>â€¢ {addon}
Â  Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.emptyText}>â€¢ None</Text>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </View>

Â  Â  Â  Â  Â  {/* Special Instructions */}
Â  Â  Â  Â  Â  <Text style={styles.subTitle}>Special Instructions</Text>
Â  Â  Â  Â  Â  <View style={styles.listGroup}>
Â  Â  Â  Â  Â  Â  {instructions ? (
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.listItem}>â€¢ {instructions}</Text>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.emptyText}>â€¢ None</Text>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  </View>

Â  Â  Â  Â  {/* Delivery Option */}
Â  Â  Â  Â  <View style={styles.card}>
Â  Â  Â  Â  Â  <Text style={styles.sectionTitle}>ðŸš› Delivery Option</Text>
Â  Â  Â  Â  Â  <View style={styles.listGroup}>
Â  Â  Â  Â  Â  Â  <Text style={[styles.listItem, styles.deliveryOption]}>â€¢ {deliveryOptionName || "Not selected"}</Text>
Â  Â  Â  Â  Â  Â  <Text style={styles.subTitle}>Delivery Fee</Text>
Â  Â  Â  Â  Â  Â  <Text style={[styles.listItem, styles.feeText]}>{getFeeDisplay(deliveryOptionName as string)}</Text>
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  </View>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Cost Summary */}
Â  Â  Â  Â  <View style={styles.card}>
Â  Â  Â  Â  Â  Â  <Text style={styles.sectionTitle}>ðŸ’° Estimated Pre-Delivery Total</Text>
Â  Â  Â  Â  Â  Â  <View style={styles.listGroup}>
Â  Â  Â  Â  Â  Â  Â  Â  <View style={styles.rowBetween}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ”‘ MODIFIED DISPLAY: Base Service Price */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.summaryItem}>Base Service Fee</Text>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.summaryValue}>â‚± {summary.basePrice.toFixed(2)}</Text>
Â  Â  Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  Â  Â  Â  <View style={styles.rowBetween}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.summaryItem}>Selected Add-Ons</Text>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.summaryValue}>â‚± {summary.addonTotal.toFixed(2)}</Text> 
Â  Â  Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {/* Dynamic Delivery Fee Cost Line (0.00 in calculation, text for display) */}
Â  Â  Â  Â  Â  Â  Â  Â  <View style={styles.rowBetween}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.summaryItem}>Delivery Fee</Text>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.summaryValue}>â‚± {summary.finalDeliveryFee.toFixed(2)}</Text>
Â  Â  Â  Â  Â  Â  Â  Â  </View>

Â  Â  Â  Â  Â  Â  Â  Â  <View style={[styles.rowBetween, styles.totalRow]}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.totalText}>ESTIMATED TOTAL</Text>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Text style={styles.totalValue}>â‚± {summary.grandTotal.toFixed(2)}</Text>
Â  Â  Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  </View>

Â  Â  Â  </ScrollView>

Â  Â  Â  {/* Order Button (Submission Wrapper) */}
Â  Â  Â  <View style={styles.footer}>
Â  Â  Â  Â  <TouchableOpacity
Â  Â  Â  Â  Â  style={[
                styles.paymentButton,
                isButtonDisabled && styles.disabledButton,
                submitSuccess && styles.successButton 
            ]}
Â  Â  Â  Â  Â  activeOpacity={0.9}
Â  Â  Â  Â  Â  onPress={handleFinalSubmission} // Calls the confirmation wrapper
Â  Â  Â  Â  Â  disabled={isButtonDisabled}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {isLoading ? (
Â  Â  Â  Â  Â  Â  <ActivityIndicator color="#fff" />
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <Text style={styles.paymentText}>
Â  Â  Â  Â  Â  Â  Â  {submitSuccess 
                  ? `Order Confirmed` 
                  : `Place Final Order (â‚±${summary.grandTotal.toFixed(2)})`}
Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </TouchableOpacity>
Â  Â  Â  </View>
Â  Â  </SafeAreaView>
Â  );
}

const styles = StyleSheet.create({
Â  safeArea: { flex: 1, backgroundColor: "#f7f9fc" },
Â  container: { flex: 1, paddingHorizontal: 16, paddingTop: 30 },
Â  rowBetween: {
Â  Â  flexDirection: "row",
Â  Â  justifyContent: "space-between",
Â  Â  marginBottom: 5,
Â  },
Â  card: {
Â  Â  backgroundColor: "#fff",
Â  Â  padding: 18,
Â  Â  borderRadius: 16,
Â  Â  marginBottom: 18,
Â  Â  borderWidth: 1,
Â  Â  borderColor: "#eee",
Â  Â  shadowColor: "#000",
Â  Â  shadowOpacity: 0.05,
Â  Â  shadowRadius: 4,
Â  Â  elevation: 2,
Â  },
Â  highlightCard: {
Â  Â  borderColor: "#004aad",
Â  Â  borderWidth: 1.5,
Â  Â  backgroundColor: "#eaf2ff",
Â  },
Â  orderId: { fontSize: 18, fontWeight: "700", color: "#004aad" },
Â  shopName: { fontSize: 16, fontWeight: "600", color: "#333", marginBottom: 5 },
Â  date: { fontSize: 14, color: "#666", fontWeight: "500" },
Â  sectionTitle: {
Â  Â  fontSize: 17,
Â  Â  fontWeight: "700",
Â  Â  marginBottom: 10,
Â  Â  color: "#004aad",
Â  },
Â  subTitle: {
Â  Â  fontSize: 15,
Â  Â  fontWeight: "600",
Â  Â  marginTop: 12,
Â  Â  marginBottom: 6,
Â  Â  color: "#333",
Â  },
Â  listGroup: { marginLeft: 10 },
Â  listItem: {
Â  Â  fontSize: 14,
Â  Â  marginBottom: 6,
Â  Â  color: "#444",
Â  Â  lineHeight: 20,
Â  },
Â  emptyText: {
Â  Â  fontSize: 14,
Â  Â  color: "#999",
Â  Â  marginBottom: 6,
Â  Â  fontStyle: "italic",
Â  },
Â  deliveryOption: { fontWeight: "600", color: "#004aad" },

Â  headerTitle: {
Â  Â  color: "#000000ff",
Â  Â  fontSize: 20,
Â  Â  fontWeight: "700",
Â  Â  marginLeft: 20,
Â  },
Â  // Cost Summary Styles
Â  summaryItem: { fontSize: 14, color: '#555' },
Â  summaryValue: { fontSize: 14, color: '#555', fontWeight: '500' },
Â  totalRow: { marginTop: 10, paddingVertical: 8, borderTopWidth: 1, borderColor: '#ddd' },
Â  totalText: { fontSize: 16, fontWeight: '700', color: '#004aad' },
Â  totalValue: { fontSize: 16, fontWeight: '700', color: '#D32F2F' },
Â  feeText: { fontWeight: '600', color: '#D32F2F' },

Â  footer: {
Â  Â  position: "absolute",
Â  Â  bottom: 0,
Â  Â  left: 0,
Â  Â  right: 0,
Â  Â  padding: 15,
Â  Â  backgroundColor: "#fff",
Â  Â  borderTopWidth: 1,
Â  Â  borderColor: "#eee",
Â  },
Â  paymentButton: {
Â  Â  backgroundColor: "#004aad",
Â  Â  paddingVertical: 16,
Â  Â  borderRadius: 30,
Â  Â  alignItems: "center",
Â  Â  shadowColor: "#000",
Â  Â  shadowOpacity: 0.15,
Â  Â  shadowRadius: 6,
Â  Â  elevation: 4,
Â  },
Â  successButton: {
Â  Â  backgroundColor: '#4CAF50',
Â  },
Â  disabledButton: {
Â  Â  backgroundColor: '#ccc',
Â  },
Â  paymentText: {
Â  Â  color: "#fff",
Â  Â  fontSize: 16,
Â  Â  fontWeight: "bold",
Â  Â  letterSpacing: 0.5,
Â  },
});