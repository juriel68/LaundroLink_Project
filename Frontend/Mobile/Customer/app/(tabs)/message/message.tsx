// message.tsx
// frontend/message.tsx
import AsyncStorage from "@react-native-async-storage/async-storage"; 
import { useNavigation, useFocusEffect, useRouter } from "expo-router";
import React, { useLayoutEffect, useState, useCallback } from "react";
import { 
Â  Image, 
Â  Pressable, 
Â  ScrollView, 
Â  StyleSheet, 
Â  Text, 
Â  View,
Â  ActivityIndicator, 
Â  Alert, 
} from "react-native";

// Import utility functions and types
import { fetchConversations, markMessagesAsRead, ConversationPreview } from "@/lib/messages"; 
import { UserDetails } from "@/lib/auth"; // For type checking the stored user details

// --- Corrected Interface for UI data ---
interface ConversationUI {
Â  id: string; // Mapped from conversationId
Â  title: string; // Mapped from name
Â  message: string; // Mapped from lastMessage
Â  time: string; // Formatted time
Â  unread: boolean; 
Â  unreadCount: number; 
Â  logo: any; 
Â  partnerId: string; // Needed for navigation to the chat screen (Staff ID or Shop ID)
}

const PLACEHOLDER_LOGO = require("@/assets/images/laundry.avif"); 

// Helper function to format the time
const formatTime = (timestamp: string): string => {
Â  const date = new Date(timestamp);
Â  return date.toLocaleTimeString('en-US', {
Â  Â  hour: '2-digit',
Â  Â  minute: '2-digit',
Â  Â  hour12: true,
Â  }).replace('AM', 'am').replace('PM', 'pm');
};

// Maps backend ConversationPreview to frontend UI structure
const mapToUI = (data: ConversationPreview[]): ConversationUI[] => {
    // ðŸ”‘ CONSOLE LOG: Logging data before mapping
    console.log(`[FRONTEND-UI] Starting mapping for ${data.length} raw conversations.`);
    
    const mappedData = data.map(item => ({
        id: item.conversationId, Â  Â  Â  Â  Â  Â  
        title: item.name, Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 
        message: item.lastMessage || (item.lastMessageImage ? 'ðŸ“· Photo' : 'Start a conversation...'),
        time: formatTime(item.time),
        unread: item.unreadCount > 0,
        unreadCount: item.unreadCount,
        logo: PLACEHOLDER_LOGO, 
        partnerId: item.partnerId,
    }));

    // ðŸ”‘ CONSOLE LOG: Logging final mapped data sample
    if (mappedData.length > 0) {
        console.log(`[FRONTEND-UI] Mapping complete. First conversation title: ${mappedData[0].title}, ID: ${mappedData[0].id}`);
    } else {
        console.log("[FRONTEND-UI] Mapping complete. No conversations to display.");
    }

    return mappedData;
};


export default function Message() {
Â  const router = useRouter();
Â  const navigation = useNavigation();
Â  const [conversations, setConversations] = useState<ConversationUI[]>([]);
Â  const [isLoading, setIsLoading] = useState(true);
Â  
Â  // State to hold the authenticated user ID
Â  const [currentUserId, setCurrentUserId] = useState<string | null>(null); 

Â  // Function to fetch the conversation list
Â  const loadConversations = async (userId: string) => {
Â  Â  setIsLoading(true);
Â  Â  try {
        // fetchConversations in messages.ts has its own log
Â  Â  Â  Â  const rawData = await fetchConversations(userId); 
        // ðŸ”‘ CONSOLE LOG: Logging raw data count
        console.log(`[FRONTEND-UI:loadConversations] Received ${rawData.length} items for mapping.`);
Â  Â  Â  Â  setConversations(mapToUI(rawData));
Â  Â  } catch (error) {
Â  Â  Â  console.error("[FRONTEND-UI] Error fetching conversations:", error);
Â  Â  Â  Alert.alert("Error", "Failed to load messages. Please check your network.");
Â  Â  } finally {
Â  Â  Â  setIsLoading(false);
Â  Â  }
Â  };

Â  // Use useFocusEffect to retrieve the user ID and then fetch conversations
Â  useFocusEffect(
Â  Â  useCallback(() => {
Â  Â  Â  const fetchUserIdAndLoad = async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const storedUser = await AsyncStorage.getItem("user");
Â  Â  Â  Â  Â  if (storedUser) {
Â  Â  Â  Â  Â  Â  const userDetails: UserDetails = JSON.parse(storedUser);
Â  Â  Â  Â  Â  Â  const userId = userDetails.UserID;
Â  Â  Â  Â  Â  Â  setCurrentUserId(userId);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // ðŸ”‘ CONSOLE LOG: Logging the authenticated user ID
Â  Â  Â  Â  Â  Â  console.log(`[FRONTEND-UI] Authenticated User ID retrieved: ${userId}`);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  loadConversations(userId);
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.log("[FRONTEND-UI] No user found in AsyncStorage. Redirecting to login.");
Â  Â  Â  Â  Â  Â  Alert.alert("Session Expired", "Please log in again.");
Â  Â  Â  Â  Â  Â  router.replace("/");
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error("[FRONTEND-UI] Error retrieving user ID from storage:", error);
Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  }
Â  Â  Â  };
Â  Â  Â  
Â  Â  Â  fetchUserIdAndLoad();
Â  Â  }, [])
Â  );

Â  useLayoutEffect(() => {
Â  Â  navigation.setOptions({
Â  Â  Â  headerShown: true,
Â  Â  Â  headerStyle: {
Â  Â  Â  Â  backgroundColor: "#89CFF0",
Â  Â  Â  Â  borderBottomWidth: 1.5,
Â  Â  Â  Â  borderBottomColor: "#5EC1EF",
Â  Â  Â  },
Â  Â  Â  headerTintColor: "#2d2d2dff",
Â  Â  Â  headerShadowVisible: false,
Â  Â  Â  headerTitle: () => <Text style={styles.headerTitle}>Messages</Text>,
Â  Â  });
Â  }, [navigation]);

Â  const handlePress = async (item: ConversationUI) => {
Â  Â  if (!currentUserId) return; 
Â  Â  Â  
Â  Â  // 1. Backend Update: Mark messages as read
Â  Â  if (item.unread) {
        console.log(`[FRONTEND-UI] Marking messages as read for conversation: ${item.id}`);
Â  Â  Â    markMessagesAsRead(item.id, currentUserId); 
Â  Â  }
Â  Â  
Â  Â  // 2. Navigation: Go to the chat screen
Â  Â  router.push({
Â  Â  Â  pathname: "/message/message_pay",
Â  Â  Â  params: {
Â  Â  Â  Â  conversationId: item.id,
Â  Â  Â  Â  partnerName: item.title,
Â  Â  Â  Â  partnerId: item.partnerId,
Â  Â  Â  Â  lastMessageTime: item.time 
Â  Â  Â  },
Â  Â  });
Â  };
Â  
Â  // --- Loading and Empty State ---
Â  if (isLoading || currentUserId === null) {
Â  Â  return (
Â  Â  Â  <View style={[styles.container, styles.loadingContainer]}>
Â  Â  Â  Â  <ActivityIndicator size="large" color="#1E90FF" />
Â  Â  Â  Â  <Text style={{ marginTop: 10, color: '#666' }}>Loading conversations...</Text>
Â  Â  Â  </View>
Â  Â  );
Â  }

Â  if (conversations.length === 0) {
Â  Â  return (
Â  Â  Â  <View style={[styles.container, styles.loadingContainer]}>
Â  Â  Â  Â  <Text style={styles.emptyText}>You have no active conversations yet.</Text>
Â  Â  Â  </View>
Â  Â  );
Â  }

Â  // --- Display Conversations ---
Â  return (
Â  Â  <ScrollView style={styles.container} contentContainerStyle={{ padding: 16 }}>
Â  Â  Â  {conversations.map((item) => (
Â  Â  Â  Â  <Pressable
Â  Â  Â  Â  Â  key={item.id}
Â  Â  Â  Â  Â  style={[styles.card, item.unread && styles.unreadCard]}
Â  Â  Â  Â  Â  onPress={() => handlePress(item)}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <Image source={item.logo} style={styles.logo} />
Â  Â  Â  Â  Â  <View style={styles.messageContent}>
Â  Â  Â  Â  Â  Â  <View style={styles.headerRow}>
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.title}>{item.title}</Text>
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.time}>{item.time}</Text>
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  Â  <Text style={styles.message} numberOfLines={1}>{item.message}</Text>
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  {item.unread && (
Â  Â  Â  Â  Â  Â  <View style={styles.unreadBadge}>
Â  Â  Â  Â  Â  Â  Â  <Text style={styles.unreadText}>{item.unreadCount}</Text>
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </Pressable>
Â  Â  Â  ))}
Â  Â  </ScrollView>
Â  );
}

const styles = StyleSheet.create({
Â  container: { flex: 1, backgroundColor: "#f6f6f6" },
Â  loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
Â  emptyText: { fontSize: 16, color: '#666' },
Â  headerTitle: { color: "#2d2d2dff", fontSize: 20, fontWeight: "600" },
Â  card: {
Â  Â  flexDirection: "row",
Â  Â  alignItems: "center",
Â  Â  backgroundColor: "#fff",
Â  Â  padding: 14,
Â  Â  borderRadius: 12,
Â  Â  marginBottom: 14,
Â  Â  shadowColor: "#000",
Â  Â  shadowOpacity: 0.08,
Â  Â  shadowOffset: { width: 0, height: 3 },
Â  Â  shadowRadius: 6,
Â  Â  elevation: 4,
Â  Â  position: "relative",
Â  },
Â  unreadCard: { borderLeftWidth: 4, borderLeftColor: "#1E90FF" },
Â  logo: {
Â  Â  width: 54,
Â  Â  height: 54,
Â  Â  borderRadius: 27,
Â  Â  marginRight: 14,
Â  Â  borderWidth: 1,
Â  Â  borderColor: "#ddd",
Â  },
Â  messageContent: { flex: 1 },
Â  headerRow: {
Â  Â  flexDirection: "row",
Â  Â  justifyContent: "space-between",
Â  Â  alignItems: "center",
Â  },
Â  title: { fontSize: 16, fontWeight: "700", color: "#000" },
Â  time: { fontSize: 12, color: "#888" },
Â  message: { fontSize: 14, color: "#555", marginTop: 4 },
Â  unreadBadge: {
Â  Â  backgroundColor: "#1E90FF",
Â  Â  borderRadius: 8,
Â  Â  paddingHorizontal: 6,
Â  Â  paddingVertical: 2,
Â  Â  marginLeft: 8,
Â  Â  alignSelf: "flex-start",
Â  },
Â  unreadText: { color: "#fff", fontSize: 10, fontWeight: "700" },
});