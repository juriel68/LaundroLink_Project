// Customer/lib/shops.ts (FINALIZED CODE)

import axios from "axios";
import { API_URL } from "@/lib/api";

// --- SHOP INTERFACES (Matching the shops.js backend response) ---

/**
 * Interface for a Shop item returned by the /api/shops/nearby route.
 */
export interface Shop {
Â  id: string; // Corresponds to ShopID
Â  name: string; // Corresponds to ShopName
Â  address: string; // Corresponds to ShopAddress
Â  description: string; // Corresponds to ShopDescrp
Â  image_url: string; // Corresponds to ShopImage_url
Â  contact: string; // Corresponds to ShopPhone
Â  hours: string; // Corresponds to ShopOpeningHours
Â  availability: string; // Corresponds to ShopStatus
Â  rating: string; // Corresponds to COALESCE(AVG(CR.CustRating), 0.0)
Â  distance: number; // Calculated distance (from the nearby route)
}

/**
 * Interface for Service details.
 * CRITICAL FIX: Includes 'id' (SvcID) needed for the final payload.
 */
export interface Service {
Â  id: string; // ðŸ”‘ SvcID (Required for Payload)
Â  name: string; // SvcName
Â  price: number; // SvcPrice
Â  minLoad: number; // MinLoad
Â  maxLoad: number; // MaxLoad
}

/**
 * Interface for Add-On details.
 * CRITICAL FIX: Includes 'id' (AddOnID) needed for the final payload.
 */
export interface AddOn {
Â  id: string; // ðŸ”‘ AddOnID (Required for Payload)
Â  name: string; // AddOnName
Â  price: number; // AddOnPrice
}

/**
 * Interface for Delivery Option details.
 */
export interface DeliveryOption {
Â  id: string; Â  Â  Â // DlvryID (e.g., 'DV01')
Â  name: string; Â  Â // DlvryName
Â  description: string; // DlvryDescription
}

export interface FabricType {
    id: string; // FabTypeID (e.g., 'FT01')
    name: string; // FabricType (e.g., 'Regular Clothes')
}

/**
 * The complete structure returned when fetching full shop details.
 */
export interface FullShopDetails {
Â  shop: Shop; // Detailed info for the selected shop
Â  services: Service[];
Â  addOns: AddOn[];
Â  deliveryOptions: DeliveryOption[]; // NEW: Added to match updated shops.js
  fabricTypes: FabricType[];
}


// --- API FUNCTIONS ---

/**
 * Fetches a list of shops near the provided geographic coordinates.
 * Corresponds to: GET /api/shops/nearby
 */
export const fetchNearbyShops = async (latitude: number, longitude: number): Promise<Shop[]> => {
Â  try {
Â  Â  const response = await axios.get(`${API_URL}/shops/nearby`, {
Â  Â  Â  params: { lat: latitude, lon: longitude }
Â  Â  });

Â  Â  if (response.data.success) {
Â  Â  Â  return response.data.shops || []; 
Â  Â  }
Â  Â  
Â  Â  console.error("Backend reported error fetching shops:", response.data.message);
Â  Â  return [];

Â  } catch (error) {
Â  Â  console.error("Error in fetchNearbyShops (Network/Server):", error);
Â  Â  return []; 
Â  }
};

/**
 * Fetches the full details (services, add-ons, and delivery options) for a specific shop.
 * Corresponds to: GET /api/shops/:shopId/full-details
 */
export const fetchShopDetails = async (shopId: string): Promise<FullShopDetails | null> => {
Â  try {
Â  Â  const response = await axios.get(`${API_URL}/shops/${shopId}/full-details`);

Â  Â  if (response.data.success && response.data.shop) {
Â  Â  Â  return {
Â  Â  Â  Â  shop: response.data.shop,
Â  Â  Â  Â  services: response.data.services || [],
Â  Â  Â  Â  addOns: response.data.addOns || [],
Â  Â  Â  Â  deliveryOptions: response.data.deliveryOptions || [], 
Â  Â  Â  Â  // ðŸ”‘ NEW: Retrieve fabric types
Â  Â  Â  Â  fabricTypes: response.data.fabricTypes || [], 
Â  Â  Â  };
Â  Â  }
Â  Â  
Â  Â  console.error(`Shop details not found or failed to load for ShopID ${shopId}:`, response.data.error);
Â  Â  return null;

Â  } catch (error) {
Â  Â  console.error(`Error in fetchShopDetails for ${shopId} (Network/Server):`, error);
Â  Â  return null;
Â  }
};